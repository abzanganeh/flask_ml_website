name: Playwright Tests with Allure Reports

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Install Playwright Browsers
      run: playwright install --with-deps
      
    - name: Create reports directories
      run: |
        mkdir -p reports
        mkdir -p allure-results
        
    - name: Run Playwright tests with Allure
      run: |
        pytest tests/ \
          --browser=${{ matrix.browser }} \
          --base-url="https://www.zanganehai.com" \
          --html=reports/report-${{ matrix.browser }}.html \
          --self-contained-html \
          --alluredir=allure-results/${{ matrix.browser }} \
          -v
          
    - name: Upload HTML test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: html-report-${{ matrix.browser }}
        path: reports/
        retention-days: 30
        
    - name: Upload Allure test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.browser }}
        path: allure-results/
        retention-days: 30

  # Combine all browser results and generate unified Allure report
  allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download all Allure results
      uses: actions/download-artifact@v4
      with:
        pattern: allure-results-*
        path: combined-allure-results
        merge-multiple: true
        
    - name: Get Allure history
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages
        
    - name: Generate Allure Report
      uses: simple-elf/allure-publish-action@master
      if: always()
      with:
        subfolder: combined-allure-results
        gh_pages: gh-pages
        allure_results: combined-allure-results
        allure_history: allure-history
        keep_reports: 20
        
    - name: Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: always()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-history
        destination_dir: test-reports

  # Create summary comment on PR
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, allure-report]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Create Test Summary Comment
      uses: actions/github-script@v6
      with:
        script: |
          const testResults = '${{ needs.test.result }}';
          const reportUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/`;
          
          const emoji = testResults === 'success' ? '‚úÖ' : '‚ùå';
          const status = testResults === 'success' ? 'PASSED' : 'FAILED';
          
          const body = `## ${emoji} Test Results: ${status}
          
          ### üìä Test Report Links
          - [üìà Allure Report](${reportUrl}) - Interactive test results with history
          - [üîç Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) - Download detailed reports
          
          ### üîß Tested Browsers
          - Chromium: ${testResults}
          - Firefox: ${testResults}  
          - WebKit: ${testResults}
          
          ### üìù Test Summary
          - **Total Tests**: Multiple browser cross-compatibility tests
          - **Target URL**: https://www.zanganehai.com
          - **Report Generated**: ${new Date().toISOString()}
          
          ${testResults !== 'success' ? '‚ö†Ô∏è **Please check the reports above for failure details**' : 'üéâ **All tests passed successfully!**'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });