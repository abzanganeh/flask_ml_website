name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Install Playwright Browsers
      run: playwright install --with-deps
      
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run Playwright tests
      run: |
        pytest tests/ \
          --browser=${{ matrix.browser }} \
          --base-url="https://www.zanganehai.com" \
          --html=reports/report-${{ matrix.browser }}.html \
          --self-contained-html \
          -v \
          --tb=short \
          --maxfail=5
      continue-on-error: true
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: reports/
        retention-days: 30

  deploy-reports:
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download all test reports
      uses: actions/download-artifact@v4
      with:
        pattern: playwright-report-*
        path: all-reports
        merge-multiple: true
        
    - name: Create index page
      run: |
        mkdir -p final-reports
        
        # Check if all-reports directory exists and has content
        if [ -d "all-reports" ] && [ "$(ls -A all-reports 2>/dev/null)" ]; then
          find all-reports -name "*.html" -exec cp {} final-reports/ \;
        else
          echo "No test reports found, creating placeholder"
          # Create a placeholder report
          cat > final-reports/placeholder.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>No Reports Available</title></head>
          <body>
            <h1>No Test Reports Available</h1>
            <p>Tests may have failed or no reports were generated.</p>
          </body>
          </html>
          EOF
        fi
        
        # Get current date and time
        CURRENT_DATE=$(date '+%B %d, %Y at %H:%M UTC')
        
        # Create HTML with placeholder
        cat > final-reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Test Reports - Flask ML Website</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                    margin: 0; 
                    padding: 40px; 
                    background: #f8f9fa; 
                    color: #333;
                }
                .container { 
                    max-width: 900px; 
                    margin: 0 auto; 
                    background: white; 
                    padding: 40px; 
                    border-radius: 12px; 
                    box-shadow: 0 4px 20px rgba(0,0,0,0.08); 
                }
                h1 { 
                    color: #2c3e50; 
                    text-align: center; 
                    margin-bottom: 40px; 
                    font-size: 2.5rem;
                    font-weight: 700;
                }
                .report-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                    gap: 30px;
                    margin: 40px 0;
                }
                .report-card { 
                    border: 1px solid #e9ecef; 
                    padding: 30px; 
                    border-radius: 12px; 
                    background: #ffffff;
                    transition: all 0.3s ease;
                }
                .report-card:hover { 
                    transform: translateY(-2px); 
                    box-shadow: 0 8px 25px rgba(0,0,0,0.12); 
                }
                .report-card h3 { 
                    margin: 0 0 15px 0; 
                    color: #2c3e50; 
                    font-size: 1.4rem;
                    font-weight: 600;
                }
                .report-card p {
                    color: #6c757d;
                    margin-bottom: 20px;
                    line-height: 1.5;
                }
                .report-card a { 
                    display: inline-block; 
                    padding: 12px 24px; 
                    background: #007bff; 
                    color: white; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    font-weight: 500;
                    transition: all 0.3s ease;
                }
                .report-card a:hover { 
                    background: #0056b3; 
                    transform: translateY(-1px);
                }
                .meta { 
                    text-align: center; 
                    margin-top: 50px; 
                    padding-top: 30px;
                    border-top: 1px solid #e9ecef;
                    color: #6c757d; 
                    font-size: 14px; 
                }
                .meta p {
                    margin: 8px 0;
                }
                .status-badge {
                    display: inline-block;
                    padding: 4px 12px;
                    background: #28a745;
                    color: white;
                    border-radius: 20px;
                    font-size: 12px;
                    font-weight: 600;
                    margin-bottom: 15px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Playwright Test Reports</h1>
                
                <div class="report-grid">
                    <div class="report-card">
                        <div class="status-badge">CHROMIUM</div>
                        <h3>Desktop Browser Tests</h3>
                        <p>Complete test suite execution on Chromium engine including functionality, performance, and compatibility validation.</p>
                        <a href="report-chromium.html">View Report</a>
                    </div>
                    
                    <div class="report-card">
                        <div class="status-badge">FIREFOX</div>
                        <h3>Cross-Browser Compatibility</h3>
                        <p>Mozilla Firefox testing to ensure consistent functionality across different browser engines and rendering systems.</p>
                        <a href="report-firefox.html">View Report</a>
                    </div>
                    
                    <div class="report-card">
                        <div class="status-badge">WEBKIT</div>
                        <h3>Safari Engine Tests</h3>
                        <p>WebKit engine validation for Safari compatibility and mobile browser performance verification.</p>
                        <a href="report-webkit.html">View Report</a>
                    </div>
                </div>
                
                <div class="meta">
                    <p><strong>Test Target:</strong> https://www.zanganehai.com</p>
                    <p><strong>Generated:</strong> DATE_PLACEHOLDER</p>
                    <p><strong>Test Framework:</strong> Playwright with Pytest</p>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Replace the placeholder with actual date
        sed -i "s/DATE_PLACEHOLDER/$CURRENT_DATE/g" final-reports/index.html
        
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: final-reports
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4